use crate::db::DbPool;
use crate::errors::ApiError;
use crate::middleware::auth::AuthenticatedUser;
use crate::models::response::ApiResponse;
use crate::models::session_policy::{SessionLimitPolicy, SessionLimitPolicyDto};
use crate::services::session_policy_service::SessionPolicyService;
use actix_web::{web, HttpResponse, Responder};
use tracing::info;

/// # Lista detalhes da pol√≠tica de sess√£o
/// 
/// Retorna a pol√≠tica de sess√£o aplicada ao usu√°rio autenticado
/// 
/// ## Endpoint
/// 
/// `GET /api/sessions/policy`
/// 
/// ## Resposta
/// 
/// ```json
/// {
///   "status": "success",
///   "message": null,
///   "data": {
///     "max_sessions": 5,
///     "current_sessions": 2,
///     "revoke_strategy": "RevokeOldest",
///     "is_custom": false,
///     "is_active": true
///   }
/// }
/// ```
pub async fn get_my_session_policy(
    pool: web::Data<DbPool>,
    auth_user: AuthenticatedUser,
) -> Result<impl Responder, ApiError> {
    let summary = SessionPolicyService::get_policy_summary(&pool, &auth_user.id)?;
    
    Ok(HttpResponse::Ok().json(ApiResponse::success(summary)))
}

/// # Lista detalhes da pol√≠tica de sess√£o de um usu√°rio
/// 
/// Retorna a pol√≠tica de sess√£o aplicada a um usu√°rio espec√≠fico (admin)
/// 
/// ## Endpoint
/// 
/// `GET /api/admin/users/{user_id}/sessions/policy`
/// 
/// ## Par√¢metros de URL
/// 
/// - `user_id`: ID do usu√°rio
/// 
/// ## Resposta
/// 
/// ```json
/// {
///   "status": "success",
///   "message": null,
///   "data": {
///     "max_sessions": 5,
///     "current_sessions": 2,
///     "revoke_strategy": "RevokeOldest",
///     "is_custom": false,
///     "is_active": true
///   }
/// }
/// ```
pub async fn get_user_session_policy(
    pool: web::Data<DbPool>,
    user_id: web::Path<String>,
    _auth_user: AuthenticatedUser,
) -> Result<impl Responder, ApiError> {
    let summary = SessionPolicyService::get_policy_summary(&pool, &user_id)?;
    
    Ok(HttpResponse::Ok().json(ApiResponse::success(summary)))
}

/// # Atualiza pol√≠tica global de sess√£o
/// 
/// Atualiza a pol√≠tica global de limite de sess√µes
/// 
/// ## Endpoint
/// 
/// `PUT /api/admin/sessions/policy`
/// 
/// ## Corpo da Requisi√ß√£o
/// 
/// ```json
/// {
///   "max_sessions_per_user": 5,
///   "revoke_strategy": "RevokeOldest",
///   "is_active": true
/// }
/// ```
/// 
/// ## Resposta
/// 
/// ```json
/// {
///   "status": "success",
///   "message": "Pol√≠tica global de sess√£o atualizada com sucesso ‚úÖ",
///   "data": {
///     "id": "550e8400-e29b-41d4-a716-446655440000",
///     "session_limit": {
///       "max_sessions_per_user": 5,
///       "revoke_strategy": "RevokeOldest",
///       "is_active": true
///     },
///     "is_active": true,
///     "updated_at": "2023-09-15T14:30:00Z"
///   }
/// }
/// ```
pub async fn update_global_policy(
    pool: web::Data<DbPool>,
    policy_dto: web::Json<SessionLimitPolicyDto>,
    _auth_user: AuthenticatedUser,
) -> Result<impl Responder, ApiError> {
    // Converter DTO para modelo
    let policy = SessionLimitPolicy {
        max_sessions_per_user: policy_dto.max_sessions_per_user,
        revoke_strategy: policy_dto.revoke_strategy,
        is_active: policy_dto.is_active,
    };
    
    // Atualizar pol√≠tica global
    let updated_policy = SessionPolicyService::update_global_policy(&pool, &policy)?;
    
    info!("üîÑ Pol√≠tica global de sess√£o atualizada: {} sess√µes por usu√°rio, estrat√©gia {:?}",
          policy.max_sessions_per_user, policy.revoke_strategy);
    
    Ok(HttpResponse::Ok().json(ApiResponse::success_with_message(
        updated_policy,
        "Pol√≠tica global de sess√£o atualizada com sucesso ‚úÖ"
    )))
}

/// # Define pol√≠tica de sess√£o para usu√°rio
/// 
/// Define uma pol√≠tica de limite de sess√µes espec√≠fica para um usu√°rio
/// 
/// ## Endpoint
/// 
/// `PUT /api/admin/users/{user_id}/sessions/policy`
/// 
/// ## Par√¢metros de URL
/// 
/// - `user_id`: ID do usu√°rio
/// 
/// ## Corpo da Requisi√ß√£o
/// 
/// ```json
/// {
///   "max_sessions_per_user": 10,
///   "revoke_strategy": "BlockNew",
///   "is_active": true
/// }
/// ```
/// 
/// ## Resposta
/// 
/// ```json
/// {
///   "status": "success",
///   "message": "Pol√≠tica de sess√£o para o usu√°rio atualizada com sucesso ‚úÖ",
///   "data": {
///     "id": "550e8400-e29b-41d4-a716-446655440000",
///     "user_id": "550e8400-e29b-41d4-a716-446655440001",
///     "session_limit": {
///       "max_sessions_per_user": 10,
///       "revoke_strategy": "BlockNew",
///       "is_active": true
///     },
///     "is_active": true,
///     "created_at": "2023-09-15T14:30:00Z",
///     "updated_at": "2023-09-15T14:30:00Z"
///   }
/// }
/// ```
pub async fn set_user_policy(
    pool: web::Data<DbPool>,
    user_id: web::Path<String>,
    policy_dto: web::Json<SessionLimitPolicyDto>,
    _auth_user: AuthenticatedUser,
) -> Result<impl Responder, ApiError> {
    // Converter DTO para modelo
    let policy = SessionLimitPolicy {
        max_sessions_per_user: policy_dto.max_sessions_per_user,
        revoke_strategy: policy_dto.revoke_strategy,
        is_active: policy_dto.is_active,
    };
    
    // Definir pol√≠tica para o usu√°rio
    let user_policy = SessionPolicyService::set_user_policy(&pool, &user_id, &policy)?;
    
    info!("‚úÖ Pol√≠tica de sess√£o definida para usu√°rio {}: {} sess√µes, estrat√©gia {:?}",
          user_id, policy.max_sessions_per_user, policy.revoke_strategy);
    
    Ok(HttpResponse::Ok().json(ApiResponse::success_with_message(
        user_policy,
        "Pol√≠tica de sess√£o para o usu√°rio atualizada com sucesso ‚úÖ"
    )))
}

/// # Remove pol√≠tica de sess√£o de usu√°rio
/// 
/// Remove a pol√≠tica de limite de sess√µes espec√≠fica de um usu√°rio, voltando √† pol√≠tica global
/// 
/// ## Endpoint
/// 
/// `DELETE /api/admin/users/{user_id}/sessions/policy`
/// 
/// ## Par√¢metros de URL
/// 
/// - `user_id`: ID do usu√°rio
/// 
/// ## Resposta
/// 
/// ```json
/// {
///   "status": "success",
///   "message": "Pol√≠tica de sess√£o removida, usu√°rio agora usa a pol√≠tica global ‚úÖ",
///   "data": null
/// }
/// ```
pub async fn remove_user_policy(
    pool: web::Data<DbPool>,
    user_id: web::Path<String>,
    _auth_user: AuthenticatedUser,
) -> Result<impl Responder, ApiError> {
    // Remover pol√≠tica do usu√°rio
    SessionPolicyService::remove_user_policy(&pool, &user_id)?;
    
    info!("üóëÔ∏è Pol√≠tica de sess√£o removida para usu√°rio {}", user_id);
    
    Ok(HttpResponse::Ok().json(ApiResponse::success_with_message(
        (),
        "Pol√≠tica de sess√£o removida, usu√°rio agora usa a pol√≠tica global ‚úÖ"
    )))
}

/// # Lista todas as sess√µes ativas para um usu√°rio
/// 
/// Retorna todas as sess√µes ativas para um usu√°rio espec√≠fico (admin)
/// 
/// ## Endpoint
/// 
/// `GET /api/admin/users/{user_id}/sessions`
/// 
/// ## Par√¢metros de URL
/// 
/// - `user_id`: ID do usu√°rio
/// 
/// ## Resposta
/// 
/// ```json
/// {
///   "status": "success",
///   "message": null,
///   "data": {
///     "count": 2,
///     "policy": {
///       "max_sessions": 5,
///       "current_sessions": 2,
///       "revoke_strategy": "RevokeOldest",
///       "is_custom": false,
///       "is_active": true
///     }
///   }
/// }
/// ```
pub async fn get_user_sessions_count(
    pool: web::Data<DbPool>,
    user_id: web::Path<String>,
    _auth_user: AuthenticatedUser,
) -> Result<impl Responder, ApiError> {
    let count = SessionPolicyService::count_active_sessions(&pool, &user_id)?;
    let summary = SessionPolicyService::get_policy_summary(&pool, &user_id)?;
    
    Ok(HttpResponse::Ok().json(ApiResponse::success(serde_json::json!({
        "count": count,
        "policy": summary
    }))))
}

/// Configura√ß√£o das rotas do controlador de pol√≠tica de sess√£o
pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(
        // Rotas para usu√°rio autenticado
        web::scope("")
            // Obter minha pol√≠tica de sess√£o
            .route("/policy", web::get().to(get_my_session_policy))
    );
    
    info!("üîí Rotas de pol√≠tica de sess√£o configuradas");
}

/// Configura√ß√£o das rotas de administra√ß√£o de pol√≠tica de sess√£o
pub fn admin_config(cfg: &mut web::ServiceConfig) {
    cfg.service(
        // Rotas de administra√ß√£o
        web::scope("/sessions")
            // Atualizar pol√≠tica global
            .route("/policy", web::put().to(update_global_policy))
    )
    .service(
        // Rotas para gerenciar pol√≠ticas espec√≠ficas de usu√°rios
        web::scope("/users/{user_id}/sessions")
            // Contar sess√µes de um usu√°rio
            .route("", web::get().to(get_user_sessions_count))
            // Obter pol√≠tica de um usu√°rio
            .route("/policy", web::get().to(get_user_session_policy))
            // Definir pol√≠tica para um usu√°rio
            .route("/policy", web::put().to(set_user_policy))
            // Remover pol√≠tica de um usu√°rio
            .route("/policy", web::delete().to(remove_user_policy))
    );
    
    info!("üõ°Ô∏è Rotas de administra√ß√£o de pol√≠tica de sess√£o configuradas");
} 
