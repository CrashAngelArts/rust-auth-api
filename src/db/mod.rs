// Remover m√≥dulos n√£o utilizados
// pub mod migrations;
// pub mod pool;

use crate::errors::ApiError;
use r2d2::Pool;
use r2d2_sqlite::SqliteConnectionManager;
// Remover import duplicado, precisamos apenas da macro
use refinery_macros::embed_migrations;
use rusqlite::Connection;
use std::path::Path;
use tracing::info; // Usar tracing em vez de log

// Incorpora as migra√ß√µes SQL do diret√≥rio 'migrations'
embed_migrations!("migrations");

pub type DbPool = Pool<SqliteConnectionManager>;
// pub type DbConnection = r2d2::PooledConnection<SqliteConnectionManager>; // N√£o utilizado

// Inicializa o banco de dados
pub fn init_db(database_url: &str) -> Result<DbPool, ApiError> {
    info!("üóÉÔ∏è Inicializando banco de dados em: {}", database_url);
    // Garante que o diret√≥rio do banco de dados existe
    if let Some(parent) = Path::new(database_url).parent() {
        std::fs::create_dir_all(parent).map_err(|e| ApiError::InternalServerError(format!("Falha ao criar diret√≥rio do banco de dados: {}", e)))?;
    }

    // 1. Abrir conex√£o inicial para aplicar migra√ß√µes e PRAGMAs
    let mut conn = Connection::open(database_url)?;
    info!("‚úîÔ∏è Conex√£o inicial com o banco de dados estabelecida.");

    // 2. Aplicar otimiza√ß√µes PRAGMA
    conn.execute_batch(
        "PRAGMA journal_mode = WAL;
         PRAGMA synchronous = NORMAL;
         PRAGMA temp_store = MEMORY;
         PRAGMA mmap_size = 30000000000;
         PRAGMA cache_size = -64000;
         PRAGMA foreign_keys = ON;"
    )?;
    info!("‚úîÔ∏è Otimiza√ß√µes PRAGMA aplicadas.");

    // 3. Executar migra√ß√µes usando refinery
    info!("üîÑ Executando migra√ß√µes do banco de dados...");
    // Usar o m√≥dulo 'migrations' gerado pela macro embed_migrations!
    match migrations::runner().run(&mut conn) { // Esta chamada deve funcionar agora
        Ok(report) => {
            if !report.applied_migrations().is_empty() {
                info!("‚úÖ Migra√ß√µes aplicadas com sucesso: {:?}", report.applied_migrations().iter().map(|m| m.name()).collect::<Vec<_>>());
            } else {
                info!("‚úÖ Nenhuma nova migra√ß√£o para aplicar. Banco de dados atualizado.");
            }
        }
        Err(e) => {
            return Err(ApiError::DatabaseError(format!("Falha ao executar migra√ß√µes: {}", e)));
        }
    }

    // Fechar a conex√£o inicial (n√£o √© estritamente necess√°rio, mas limpa)
    drop(conn);

    // 4. Configura o pool de conex√µes R2D2 (sem with_init, pois PRAGMAs j√° foram aplicados)
    let manager = SqliteConnectionManager::file(database_url);

    let pool = Pool::builder()
        .max_size(10)
        .build(manager)
        .map_err(|e| ApiError::DatabaseError(format!("Falha ao criar pool de conex√µes: {}", e)))?;

    // Remover chamada antiga de migra√ß√£o

    Ok(pool)
}

// // Fun√ß√£o para obter uma conex√£o do pool (N√£o utilizada)
// pub fn get_connection(pool: &DbPool) -> Result<DbConnection, ApiError> {
//     pool.get()
//         .map_err(|e| ApiError::DatabaseError(format!("Falha ao obter conex√£o do pool: {}", e)))
// }

// Remover fun√ß√£o antiga de cria√ß√£o de DB de teste
// A l√≥gica de teste precisar√° ser adaptada para usar refinery::runner().run(&mut conn)
// em uma conex√£o em mem√≥ria.
