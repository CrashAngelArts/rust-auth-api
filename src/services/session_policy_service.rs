use crate::db::DbPool;
use crate::errors::ApiError;
use crate::models::session_policy::{GlobalSessionPolicy, RevocationStrategy, SessionLimitPolicy, UserSessionPolicy};
use crate::repositories::session_policy_repository::SessionPolicyRepository;
use tracing::{error, info, warn};

/// Servi√ßo para gerenciar pol√≠ticas de sess√£o
pub struct SessionPolicyService;

impl SessionPolicyService {
    /// Inicializa o servi√ßo de pol√≠tica de sess√£o
    pub fn init(pool: &DbPool) -> Result<(), ApiError> {
        // Criar tabelas necess√°rias
        SessionPolicyRepository::create_tables(pool)?;
        
        info!("‚úÖ Servi√ßo de pol√≠tica de sess√£o inicializado");
        
        Ok(())
    }
    
    /// Obt√©m a pol√≠tica global de sess√£o
    pub fn get_global_policy(pool: &DbPool) -> Result<GlobalSessionPolicy, ApiError> {
        SessionPolicyRepository::get_global_policy(pool)
    }
    
    /// Atualiza a pol√≠tica global de sess√£o
    pub fn update_global_policy(pool: &DbPool, policy: &SessionLimitPolicy) -> Result<GlobalSessionPolicy, ApiError> {
        // Validar a pol√≠tica antes de atualizar
        if policy.max_sessions_per_user == 0 {
            return Err(ApiError::BadRequestError("O n√∫mero m√°ximo de sess√µes n√£o pode ser zero üö´".to_string()));
        }
        
        if policy.max_sessions_per_user > 100 {
            return Err(ApiError::BadRequestError("O n√∫mero m√°ximo de sess√µes n√£o pode exceder 100 üö´".to_string()));
        }
        
        SessionPolicyRepository::update_global_policy(pool, policy)
    }
    
    /// Obt√©m a pol√≠tica de sess√£o para um usu√°rio espec√≠fico, se existir
    pub fn get_user_policy(pool: &DbPool, user_id: &str) -> Result<Option<UserSessionPolicy>, ApiError> {
        SessionPolicyRepository::get_user_policy(pool, user_id)
    }
    
    /// Cria ou atualiza a pol√≠tica de sess√£o para um usu√°rio espec√≠fico
    pub fn set_user_policy(
        pool: &DbPool, 
        user_id: &str, 
        policy: &SessionLimitPolicy
    ) -> Result<UserSessionPolicy, ApiError> {
        // Validar a pol√≠tica
        if policy.max_sessions_per_user == 0 {
            return Err(ApiError::BadRequestError("O n√∫mero m√°ximo de sess√µes n√£o pode ser zero üö´".to_string()));
        }
        
        if policy.max_sessions_per_user > 100 {
            return Err(ApiError::BadRequestError("O n√∫mero m√°ximo de sess√µes n√£o pode exceder 100 üö´".to_string()));
        }
        
        SessionPolicyRepository::set_user_policy(pool, user_id, policy)
    }
    
    /// Remove a pol√≠tica espec√≠fica de um usu√°rio
    pub fn remove_user_policy(pool: &DbPool, user_id: &str) -> Result<(), ApiError> {
        SessionPolicyRepository::remove_user_policy(pool, user_id)
    }
    
    /// Verifica e aplica a pol√≠tica de limite de sess√µes durante a cria√ß√£o de uma nova sess√£o
    pub fn check_and_apply_policy(pool: &DbPool, user_id: &str) -> Result<bool, ApiError> {
        // Verificar se o usu√°rio excedeu o limite
        let has_exceeded = SessionPolicyRepository::has_exceeded_limit(pool, user_id)?;
        
        if has_exceeded {
            // Obter a pol√≠tica efetiva para o usu√°rio
            let policy = SessionPolicyRepository::get_effective_policy(pool, user_id)?;
            
            if policy.is_active {
                if policy.revoke_strategy == RevocationStrategy::BlockNew {
                    // Se a estrat√©gia for bloquear novas sess√µes, avisar e n√£o permitir
                    warn!("üö´ Nova sess√£o bloqueada para o usu√°rio {} - limite de {} sess√µes atingido",
                          user_id, policy.max_sessions_per_user);
                    
                    return Ok(false);
                } else {
                    // Caso contr√°rio, aplicar a estrat√©gia de revoga√ß√£o
                    info!("‚ö†Ô∏è Usu√°rio {} excedeu o limite de sess√µes. Aplicando estrat√©gia: {:?}", 
                          user_id, policy.revoke_strategy);
                    
                    return SessionPolicyRepository::apply_limit_strategy(pool, user_id);
                }
            }
        }
        
        // Se n√£o excedeu o limite ou a pol√≠tica n√£o est√° ativa, permitir
        Ok(true)
    }
    
    /// Conta o n√∫mero de sess√µes ativas para um usu√°rio
    pub fn count_active_sessions(pool: &DbPool, user_id: &str) -> Result<u32, ApiError> {
        SessionPolicyRepository::count_active_sessions(pool, user_id)
    }
    
    /// Obt√©m o resumo da pol√≠tica de sess√£o para um usu√°rio, incluindo dados de uso atual
    pub fn get_policy_summary(pool: &DbPool, user_id: &str) -> Result<SessionPolicySummary, ApiError> {
        let policy = SessionPolicyRepository::get_effective_policy(pool, user_id)?;
        let session_count = SessionPolicyRepository::count_active_sessions(pool, user_id)?;
        let is_custom = SessionPolicyRepository::get_user_policy(pool, user_id)?.is_some();
        
        Ok(SessionPolicySummary {
            max_sessions: policy.max_sessions_per_user,
            current_sessions: session_count,
            revoke_strategy: policy.revoke_strategy,
            is_custom,
            is_active: policy.is_active,
        })
    }
}

/// Resumo da pol√≠tica de sess√£o de um usu√°rio, incluindo uso atual
#[derive(Debug, serde::Serialize)]
pub struct SessionPolicySummary {
    /// N√∫mero m√°ximo de sess√µes permitidas
    pub max_sessions: u32,
    
    /// N√∫mero atual de sess√µes ativas
    pub current_sessions: u32,
    
    /// Estrat√©gia de revoga√ß√£o quando o limite √© atingido
    pub revoke_strategy: RevocationStrategy,
    
    /// Se esta √© uma pol√≠tica personalizada ou a global
    pub is_custom: bool,
    
    /// Se a pol√≠tica est√° ativa
    pub is_active: bool,
} 
